#!/usr/bin/env python
PACKAGE = "face_detection"

from dynamic_reconfigure.parameter_generator_catkin import *


gen = ParameterGenerator()
gen.add("imageInput",              str_t,    0,
        "Subscribe to this image topic",
         "/facerec/input_image")
gen.add("imageOutput",              str_t,    0,
        "Publish to this image topic",
         "/facerec/image_raw")
gen.add("skipFrames",              int_t,    0,
        "Skip frames that are used for detection",
         1, 1, 20)


imgScale_enum = gen.enum([ gen.const("No_Resize",      double_t, 1, ""),
                         gen.const("Resize_by_0_875",     double_t, 0.875, ""),
                         gen.const("Resize_by_0_75",     double_t, 0.75, ""),
                         gen.const("Resize_by_0_625",     double_t, 0.625, ""),
                         gen.const("Resize_by_0_5",     double_t, 0.5, ""),
                         gen.const("Resize_by_0_375",     double_t, 0.375, ""),
                         gen.const("Resize_by_0_25",     double_t, 0.25, ""),
                         gen.const("Resize_by_0_125",     double_t, 0.125, "")],
                        "The detection image will be resized by this value. (great performance increase).")
gen.add("imgScale", double_t, 0, "Select a scaling factor for the detection image", 0.625, edit_method=imgScale_enum)


debug_enum = gen.enum([ gen.const("Display_Nothing",      int_t, 0, ""),
                         gen.const("Displays_Image",     int_t, 1, ""),
                          gen.const("Displays_Detection_Image",      int_t, 2, ""),
                          gen.const("Displays_With_Overlay",      int_t, 3, "")],
                        "An enum to set debugging")
gen.add("displayed_Image", int_t, 0, "Select type of debugging", 0, edit_method=debug_enum)

publish_enum = gen.enum([ gen.const("No_Publishing",      int_t, 0, ""),
                         gen.const("Publish_Image",     int_t, 1, ""),
                          gen.const("Publish_Data",      int_t, 2, ""),
                          gen.const("Publish_Image_and_Data",      int_t, 3, "")],
                        "An enum to set publishing")
gen.add("publish", int_t, 0, "Select what is published", 2, edit_method=publish_enum)

pixelSwitch_enum = gen.enum([ gen.const("Detection_Boxes", int_t, 0, "Draws Detection Boxes"),
                             gen.const("Pixelise",        int_t, 1, "Pixelises the detected Faces")],
                             "An enum to set pixelSwitch")
gen.add("pixelSwitch", int_t, 1, "Select a detection display type", 0, edit_method=pixelSwitch_enum)



gen.add("contrastFactor",              double_t,    0,
        "The contrast factor applied to the image to improve detection",
         1.5, 0.2, 2.5)

histOnOff_enum = gen.enum([ gen.const("Histogram_Equalisation_OFF", int_t, 0, ""),
                             gen.const("Histogram_Equalisation_ON",        int_t, 1, "")],
                             "An enum to set pixelSwitch")
gen.add("histOnOff", int_t, 1, "Select a detection display type", 0, edit_method=histOnOff_enum)


gen.add("blurFactor",              int_t,    0,
        "blurs the image a little, used to reduce noise on full resolution images (imageScaleValue = 1)",
         0, 0, 10)
gen.add("brightnessFactor",              int_t,    0,
        "brightens up the image",
         0, 0, 5)
gen.add("inputSkipp",              int_t,    0,
        "start skipping frames from the input after X frames, generally use '1' for realtime feedback, or much higher values for saving image sequences to disk",
         1, 1, 10000)


exit(gen.generate(PACKAGE, "face_detection", "face_det_dlib"))
